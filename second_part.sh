#!/usr/bin/env bash
echo """
Изоляция файловой системы : каждый контейнер процессов работает в совершенно отдельной корневой файловой системе.
Изоляция ресурса: системные ресурсы, такие как процессор и память, могут быть распределены по-разному для каждого контейнера процесса, используя cgroups.
Изоляция сети : каждый контейнер процессов работает в своем собственном пространстве имен сети с собственным виртуальным интерфейсом и IP-адресом.
Копирование при записи : корневые файловые системы создаются с использованием копирования при записи, что делает развертывание чрезвычайно быстрым, дешевым в памяти и дешевым диском.
Ведение журнала : стандартные потоки (stdout / stderr / stdin) каждого контейнера процессов собираются и регистрируются для поиска в режиме реального времени или в пакетном режиме.
Управление изменениями: изменения в файловой системе контейнера могут быть зафиксированы в новом образе и использованы повторно для создания большего количества контейнеров. Нет шаблонов или ручная настройка не требуется.
Интерактивная оболочка : docker может выделить псевдо-tty и присоединить к стандартному вводу любого контейнера, например, для запуска одноразовой интерактивной оболочки.
"""

echo -e "Автор: Ниемисто Владимир\nНазвание программы: \"Жалкое подобие Docker'а\"\nОписание: Эта вундер-вафля умеет запускать изолировано процессы, при этом все ограничения можно корректировать.\n"


#вывод информации о машине, в которой запущен скрипт...
echo -e """*************************************************\nНемного полезной информации о данной машине:
\t1. Текущий HOSTNAME: $HOSTNAME
\t2. Текущая директория: `pwd`
\t3. Открыте порты в системе порты: `sudo netstat -tulpn`
\t4. Текущий PID скрипта: $$
Полезная информация кончилась\n*************************************************
"""


while [[ $vybor != 4 ]]
do
	echo -e """\r\033[K
=================================================
Выберите нужное действие:
\t 1 - Ввести путь до исполняющего файла программы (либо ее вызов)
\t 2 - Ввести ограничение по памяти для процесса (изначально стоит ограничение в 1024 Мб)
\t 3 - 
\t 4 - Выход из приложения
=================================================
Ваш выбор: """
	#переменная, в которой хранится значение, выборанное пользователем.
	read vybor

	if [[ $vybor = 1 ]]
	then
		echo "Введите полный путь либо аллиас исполяемой программы"
		read path_programm_with_parametrs
		syscall(getcpu())


	else
		if [[ $vybor != 4 ]]
		then
			echo -e "\t\t!!! Я не понимаю, что нужно сделать. Попробуйте заново указать код действия из этого списка :)\n"
		fi
	fi
done
echo -e "\n\tНу что ж, до встречи ;)\n\tСпасибо, что пользуетесь этим недоDocker'ом.\nNikel (c)"
exit 0